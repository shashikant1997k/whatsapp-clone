{"version":3,"sources":["firebase.js","StateProvider.js","SidebarChat.js","Sidebar.js","Chat.js","Reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","SidebarChat","props","useState","seed","setSeed","messages","setMessages","useEffect","id","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","name","to","className","Avatar","src","message","onClick","roomName","prompt","add","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","type","placeholder","room","key","Chat","input","setInput","roomId","useParams","setRoomName","console","log","Date","length","timestamp","toDate","toUTCString","displayName","action","onChange","e","target","preventDefault","FieldValue","serverTimestamp","actionTypes","state","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27240b99.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDYfM6gURZHKQO69g3oGW9nmIl95yZMFSc\",\r\n    authDomain: \"whatsapp-1c75a.firebaseapp.com\",\r\n    databaseURL: \"https://whatsapp-1c75a.firebaseio.com\",\r\n    projectId: \"whatsapp-1c75a\",\r\n    storageBucket: \"whatsapp-1c75a.appspot.com\",\r\n    messagingSenderId: \"59322468393\",\r\n    appId: \"1:59322468393:web:92bee567c11193fc59f438\",\r\n    measurementId: \"G-3JSBJGP0CS\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport {auth, provider};\r\nexport default db;\r\n\r\n","import React, { createContext, useReducer, useContext } from \"react\";\r\n\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({reducer, initialState, children}) => (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport './SidebarChat.css';\r\nimport db from './firebase';\r\nimport { Link } from 'react-router-dom';\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction SidebarChat(props) {\r\n    const [seed, setSeed] = useState('');\r\n    const [messages, setMessages] = useState('');\r\n\r\n    useEffect(() => {\r\n        if(props.id){\r\n            db.collection('rooms').doc(props.id).collection('messages')\r\n            .orderBy('timestamp', 'desc').onSnapshot((snapshot) => (\r\n                setMessages(snapshot.docs.map((doc)=>\r\n                    doc.data()\r\n                ))\r\n            ))\r\n        }\r\n    }, [props.id]);\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 7000));\r\n    }, []);\r\n\r\n    const createChat = () => {\r\n        const roomName = prompt(\"Please enter name for chat\");\r\n\r\n        if(roomName){\r\n            db.collection('rooms').add({\r\n                name: roomName\r\n            })\r\n        }\r\n    }\r\n\r\n    return props.name ? (\r\n        <Link to={`/rooms/${props.id}`}>\r\n            <div className=\"sidebarChat\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n                <div className=\"sidebarChat_info\">\r\n                    <h2>{props.name}</h2>\r\n                    <p>{ messages[0]?.message }</p>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    ) : (\r\n        <div className=\"sidebarChat\" onClick={createChat}>\r\n            <h2>Add new Chat</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\r\nimport SidebarChat from './SidebarChat';\r\nimport './Sidebar.css';\r\nimport db from './firebase';\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction Sidebar() {\r\n\r\n  const [rooms, setRooms] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = db.collection('rooms').onSnapshot((snapshot)=>\r\n      setRooms(snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        data: doc.data()\r\n      })))\r\n    )\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    }\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"Sidebar\">\r\n      <div className=\"sidebar_header\">\r\n        <Avatar src={user?.photoURL} />\r\n        <div className=\"sidebar_heraderRight\">\r\n            <IconButton>\r\n                <DonutLargeIcon />\r\n            </IconButton>\r\n            <IconButton>\r\n                <ChatIcon />\r\n            </IconButton>\r\n            <IconButton>\r\n                <MoreVertIcon />\r\n            </IconButton>\r\n            \r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidbar_search\">\r\n        <div className=\"sidebar_searchContainer\">\r\n            <SearchOutlinedIcon />\r\n            <input type=\"text\" placeholder=\"Search or start new chat\"/>\r\n        </div>\r\n        \r\n      </div>\r\n\r\n      <div className=\"sidebar_chats\">\r\n        <SidebarChat />\r\n        {rooms.map(room => (\r\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport './Chat.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport db from './firebase';\r\nimport { useStateValue } from './StateProvider';\r\nimport * as firebase from 'firebase';\r\n\r\nfunction Chat() {\r\n\r\n    const [seed, setSeed] = useState('');\r\n    const [input, setInput] = useState('');\r\n    const {roomId} = useParams();\r\n    const [roomName, setRoomName] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        if(roomId){\r\n            db.collection('rooms').doc(roomId).onSnapshot(snapshot => {\r\n                console.log(snapshot)\r\n                setRoomName(snapshot.data().name)\r\n            });\r\n\r\n            db.collection('rooms').doc(roomId).collection('messages')\r\n            .orderBy('timestamp', 'asc').onSnapshot((snapshot)=>{\r\n                console.log(snapshot);\r\n                setMessages(snapshot.docs.map((doc)=>\r\n                    doc.data()\r\n                ))}\r\n            )\r\n        }\r\n    }, [roomId]);\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 7000));\r\n    }, []);\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        console.log(input);\r\n\r\n        db.collection('rooms').doc(roomId).collection('messages').add({\r\n            message: input,\r\n            name: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n\r\n        setInput(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat_header\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n\r\n                <div className=\"chat_headerInfo\">\r\n                    <h3>{ roomName }</h3>\r\n                    <p>last seen {new Date(messages[messages.length -1]?.timestamp?.toDate()).toUTCString()}</p>\r\n                </div>\r\n\r\n                <div className=\"chat_headerRight\">\r\n                    <IconButton>\r\n                        <SearchOutlinedIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <AttachFileIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"chat_body\">\r\n                {messages.map(message => (\r\n                    <p className={`chat_message ${message.name == user.displayName && \"chat_reciver\"}`}>\r\n                    <span className=\"chat_name\">\r\n                        {message.name}\r\n                    </span>\r\n                    {message.message}\r\n                    <span className=\"chat_time\">\r\n                        {new Date(message.timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </p>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chat_footer\">\r\n                <InsertEmoticonIcon />\r\n                <form action=\"\">\r\n                    <input value={input} onChange={(e)=>setInput(e.target.value)} type=\"text\" placeholder=\"Type a message\" name=\"\" id=\"\"/>\r\n                    <button type=\"submit\" onClick={sendMessage}>send</button>\r\n                </form>\r\n                <MicIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","\r\nexport const initialState = {\r\n    user: null\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\"\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type){\r\n        case actionTypes.SET_USER:\r\n            return{\r\n                ...state,\r\n                user: action.user\r\n            };\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react'\r\nimport './Login.css'\r\nimport { Button } from '@material-ui/core'\r\nimport { auth, provider } from './firebase'\r\nimport { useStateValue } from './StateProvider'\r\nimport { actionTypes } from './Reducer'\r\n\r\nfunction Login() {\r\n\r\n    const [{}, dispatch] = useStateValue();\r\n\r\n    const signIn = () =>{\r\n        auth.signInWithPopup(provider).then(result => {\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: result.user\r\n            })\r\n        }).catch(error => alert(error.message));\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login_container\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/597px-WhatsApp.svg.png\" alt=\"\"/>\r\n\r\n                <div className=\"login_text\">\r\n                    <h1>Sign in to Whatsapp</h1>\r\n                </div>\r\n\r\n                <Button onClick={signIn}>\r\n                    Sign in with Google\r\n                </Button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Login from './Login';\nimport { useStateValue } from './StateProvider';\n\nfunction App() {\n\n  const [{ user }, dispatch] = useStateValue();\n\n  return (\n    <div className=\"App\">\n      {!user ? (\n        <Login />\n      ) : (<div className=\"app_body\">\n            <Router>\n              <Sidebar />\n              <Switch>\n                <Route exact path=\"/rooms/:roomId\">\n                  <Chat />\n                </Route>\n                <Route exact path=\"/\">\n                  <Chat />\n                </Route>\n              </Switch>\n            </Router>\n        </div>\n        )}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './StateProvider';\nimport reducer, { initialState } from './Reducer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}